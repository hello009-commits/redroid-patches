From b9b0be77870bd70461f4f3dae8c4026a04d3e2dd Mon Sep 17 00:00:00 2001
From: Ziyang Zhou <ziyang.zhou@outlook.com>
Date: Sun, 9 May 2021 23:27:12 +0800
Subject: [PATCH 1/7] fix booting

---
 init/first_stage_init.cpp | 18 +++++++++++++++---
 init/service.cpp          |  3 ++-
 init/util.cpp             |  3 ++-
 rootdir/init.rc           |  1 -
 4 files changed, 19 insertions(+), 6 deletions(-)

diff --git a/init/first_stage_init.cpp b/init/first_stage_init.cpp
index 021557697..8a16cd7d0 100644
--- a/init/first_stage_init.cpp
+++ b/init/first_stage_init.cpp
@@ -34,6 +34,7 @@
 #include <android-base/chrono_utils.h>
 #include <android-base/file.h>
 #include <android-base/logging.h>
+#include <android-base/strings.h>
 #include <modprobe/modprobe.h>
 #include <private/android_filesystem_config.h>
 
@@ -192,6 +193,8 @@ int FirstStageMain(int argc, char** argv) {
     CHECKCALL(mount("tmpfs", "/dev", "tmpfs", MS_NOSUID, "mode=0755"));
     CHECKCALL(mkdir("/dev/pts", 0755));
     CHECKCALL(mkdir("/dev/socket", 0755));
+    mount("/system/etc", "/etc", "none", MS_BIND, NULL); // cgroup fix
+    unshare(CLONE_NEWCGROUP);
     CHECKCALL(mount("devpts", "/dev/pts", "devpts", 0, NULL));
 #define MAKE_STR(x) __STRING(x)
     CHECKCALL(mount("proc", "/proc", "proc", 0, "hidepid=2,gid=" MAKE_STR(AID_READPROC)));
@@ -246,7 +249,6 @@ int FirstStageMain(int argc, char** argv) {
         for (const auto& [error_string, error_errno] : errors) {
             LOG(ERROR) << error_string << " " << strerror(error_errno);
         }
-        LOG(FATAL) << "Init encountered errors starting first stage, aborting";
     }
 
     LOG(INFO) << "init first stage started!";
@@ -319,12 +321,22 @@ int FirstStageMain(int argc, char** argv) {
            1);
 
     const char* path = "/system/bin/init";
-    const char* args[] = {path, "selinux_setup", nullptr};
+    std::vector<const char *> args = {path, "second_stage"};
+    std::string init_cmdline;
+    android::base::ReadFileToString("/proc/self/cmdline", &init_cmdline);
+    std::replace(init_cmdline.begin(), init_cmdline.end(), '\0', ' ');
+    auto cmd_vector = android::base::Split(android::base::Trim(init_cmdline), " ");
+    int i = 0;
+    for (const auto& entry : cmd_vector) {
+        if (i++ == 0) continue; // ignore first arg '/init'
+        args.push_back(entry.c_str());
+    }
+    args.push_back(nullptr);
     auto fd = open("/dev/kmsg", O_WRONLY | O_CLOEXEC);
     dup2(fd, STDOUT_FILENO);
     dup2(fd, STDERR_FILENO);
     close(fd);
-    execv(path, const_cast<char**>(args));
+    execv(path, const_cast<char**>(args.data()));
 
     // execv() only returns if an error happened, in which case we
     // panic and never fall through this conditional.
diff --git a/init/service.cpp b/init/service.cpp
index 69f944eb2..7e61129ad 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -63,6 +63,7 @@ namespace android {
 namespace init {
 
 static Result<std::string> ComputeContextFromExecutable(const std::string& service_path) {
+    se_hack1("HACKED");
     std::string computed_context;
 
     char* raw_con = nullptr;
@@ -319,7 +320,7 @@ void Service::Reap(const siginfo_t& siginfo) {
             if (++crash_count_ > 4) {
                 if (flags_ & SVC_CRITICAL) {
                     // Aborts into bootloader
-                    LOG(FATAL) << "critical process '" << name_ << "' exited 4 times "
+                    LOG(ERROR) << "critical process '" << name_ << "' exited 4 times "
                                << (boot_completed ? "in 4 minutes" : "before boot completed");
                 } else {
                     LOG(ERROR) << "updatable process '" << name_ << "' exited 4 times "
diff --git a/init/util.cpp b/init/util.cpp
index 255434a1b..a9ac09d78 100644
--- a/init/util.cpp
+++ b/init/util.cpp
@@ -236,7 +236,8 @@ int wait_for_file(const char* filename, std::chrono::nanoseconds timeout) {
 
 void ImportKernelCmdline(const std::function<void(const std::string&, const std::string&)>& fn) {
     std::string cmdline;
-    android::base::ReadFileToString("/proc/cmdline", &cmdline);
+    android::base::ReadFileToString("/proc/self/cmdline", &cmdline);
+    std::replace(cmdline.begin(), cmdline.end(), '\0', ' ');
 
     for (const auto& entry : android::base::Split(android::base::Trim(cmdline), " ")) {
        std::vector<std::string> pieces = android::base::Split(entry, "=");
        if (pieces.size() == 2) {
+            std::string tt = pieces[1];
+            tt.replace(tt.find("++"),"++".size()," ");
             fn(pieces[0], tt);
         }
     }
 }
diff --git a/rootdir/init.rc b/rootdir/init.rc
index a9af0b094..183c8cc20 100644
--- a/rootdir/init.rc
+++ b/rootdir/init.rc
@@ -457,7 +457,6 @@ on post-fs
 
     # Once everything is setup, no need to modify /.
     # The bind+remount combination allows this to work in containers.
-    mount rootfs rootfs / remount bind ro nodev
 
     # Make sure /sys/kernel/debug (if present) is labeled properly
     # Note that tracefs may be mounted under debug, so we need to cross filesystems
-- 
2.34.1


